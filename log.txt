## CM
1. Flatten Binary Tree to Linked List
2. Convert BST to Doubly Linked List
3. Graph Valid Tree
4. Check Completeness of a Binary Tree
We can use BFS, if we find a null that means it is not complete.
5. Minesweeper
  Only Update board state -> BFS
  If click on a mine ('M'), mark it as 'X', stop further search.
  If click on an empty cell ('E'), depends on how many surrounding mine:
  2.1 Has surrounding mine(s), mark it with number of surrounding mine(s), stop further search.
  2.2 No surrounding mine, mark it as 'B', continue search its 8 neighbors.
6. Is Graph Bipartite?
Coloring problem. Dual colored. Bipartite graph: two color needed
7. Sort Colors ( read again ) Linear in length
Brute Force: count -> replace with counts
https://en.wikipedia.org/wiki/Dutch_national_flag_problem:
Three pointer
8. Similar String Groups ( Got a TLE ) O(t * n^2)
Similarity function is really easy to implement because "every string in A is an anagram".
9. Binary Tree Right Side View
10. Increasing Triplet Subsequence
In linear time and constant space. LIS is O(n^2) time...
Keep it simple stupid. Find three distinct minimum numbers.
11. Reverse Linked List II
Just need concentration.
12. LRU Cache
Doubly linked list. Remove close to head. Add close to tail.
One important detail is to not overcomplicate a function.
Remove should simply remove a node out of the chain and not touch other parts of the linked list.
13. All Nodes Distance K in Binary Tree
Couple different technique. Annotate each node with "parent" and just traverse.
Make a graph and BFS/DFS.
"Percolate" so be smart about looking in the left or right depending...
  - Find how deep target is... and where
  - From root node, find to the left or right K - depth - 1 nodes away (tricky)
  - From the target, find K distance (easy)
14. Convert Sorted List to Binary Search Tree ( Followed along )
This is an O(nlogn) runtime algorithm. Find middle, make middle root. Sever right side from left side.
Recurse to get left and right children. Don't forget base cases!!
15. Find the Celebrity
Find candidate then verify. Candidate: its ok to just simply ask if they A knows B. If A knows B, then candidate becomes B. We don't need two way asking.
A knows B -> no? Stay at A
A knows C -> no? Stay at A
A knows D -> no? Stay at A
A knows E -> yes! Move to E Say E is the celebrity
...E knows (...rest) -> no! Stays at E the entire time
Verify -> E -> knows (...all) -> no. Return
Verify -> ...all -> knows E -> no. Return
Return candidate!
16. Find All Anagrams in a String O(max(len(s), len(p)))
Counter, deque. Orchestrate. We might not even need a deque. Just do two pointers, we can start with deque tho.
17. Longest Absolute File Path
We can use a stack... ASK FOR CLARIFICATION(S) IF YOU GET HIT WITH THIS QUESTION!
18. Max Consecutive Ones III
Sliding window. But literally just the window size.
def longestOnes(self, A, K):
    i = 0
    for j in range(len(A)):
      K -= 1 - A[j]
      if K < 0:
        K += 1 - A[i]
        i += 1
    return j - i + 1
This is literally just the "span of the biggest window". Not where it is.
19. Add Strings
Pad with 0s, cool technique. Hassle free since everything is the same length.

## Read during CM 4/7
1. Reorder List
- Find middle 1-2-3-4-5-6 -> 4-5-6
- Sever it 1-2-3, 4-5-6
- Reverse middle 6-5-4
- Intertwine 1-6-2-5-3-4
2. Serialize Deserialize BT
- Just record nulls, make things easier
3. Design Tic Tac Toe
O(1) check. Keep track of rows, cols, diagonal + anti diagonal
4. Strobogrammatic Number
The first strobogrammatic is just to check if its a strobogrammatic number or not.
- Build the mirror of the number. See if mirror and num are the same when mirror is reversed.
6:9,9:6,8:8,1:1,0:0 thats all the basic.
5. Strobogrammatic Number II
Generate all strobogrammatic numbers of length `n`.
`helper(targetLen - 2, totalLen)`.
6. Strobogrammatic Number III
Find all strobogrammatic number within a range. Well... generate the numbers for length `n` and `m` and count.
"lenLow and lenHigh" are good variable names.
7. Pancake Flip ( Maybe Read Again )
... Really? Hmm
8. BST Iterator ( do this )
Stack based or flatten based. Up to you..
9. BT Zigzag Level Order Traversal
Only BFS ofcourse. Apparently... you need a queue as well for some optimization? If the direction is the "other" way then insert from the beginning, otherwise insert from the end. But apparently in Python it doesn't matter since its going to be converted back to list (negating the time gain).
10. Friends of Appropriate Ages
This is why asking sizes are important. Max size of ages array is 20k. Instead of doing 20k squared comparison, do 120 squared. This is because we know there are only 120 possible ages.
11. Remove Invalid Parentheses
Backtracking...? How? Lets read this
One thing I notice is to learn how to create all possible string from a string.
12. Sliding Window Maximum
We have a queue that keeps track of the five latest indices, the first element is the index that has the max so far. O(n) due to popping and appending once for each element at max.
13. Reverse Words in a String
Make into list, reverse the array, reverse every word, trim.
'''reverse every words in a string'''
l, r = 0 , 0
while r < len(arr):
    while r < len(arr) and not arr[r].isspace(): r += 1
    self.reverse_string(arr, l, r-1)
    r += 1; l = r
return arr
14. Insert Delete Get Random O(1)
Orchestrating array and hash table. Hash table keeps track of the index. Removing is just popping.
15. Insert Delete Get Random O(1) - Duplicates allowed
Make sure to carefully go through it... Use a set to keep track of the indices.
16. Kth Smallest Element in a BST
The key is how to count once? My idea earlier was to count both left and right... but do I really need this? I don't need to, I just need to count once everytime. Go left or right depending if I want max or min first.
17. Sparse Matrix Multiplication
Record all row/cols that are 0. If A@row and B@col are both 0s, skip. Result is 0.
18. Second Degree Follower...
SQL Question???
19. Palindromic Substrings
Count the number of subtrings that makes a palindrome in a string.
Expand around center, there are 2 * len(s) - 1 centers to explore.
20. Single Number - EASY
XOR.
21. Single Element in a Sorted Array
Binary search but remember the example below:
0 1 1 3 3 # start on an even index always. If the even, odd pair is not the same number, go left
1 1 3 3 # Otherwise twins so far, go right...
22. Permutations I && II
DFS. Remember your python. [] + [] -> new object
22. Insert Into a Sorted Circular Linked List
If its null, return a new node that points to itself.
If not null, find max. And find where to insert.
23. Same Tree
Make sure base case is all covered. Not p AND not q.
24. Symmetric Tree
Similar to same tree!

## Extra
1. Dot Product and Vector Compression
[1,1,1,2,2] => [[1,3],[2,2]]
[2,2,3,3,3] => 2 + 2 + 3 + 6 + 6

## Not done
1. Accounts Merge (Important Question)
2. Valid Square ( Read a little bit )
Just check. There are finite number of cases.
3. Snapshot Array ( Read a little bit )
Concept: [[-1 (snapshot ID), 0 (val)]]
4. LCA of BT ( Read a little bit )
Go through an example
5. Divide Two Integers

# Lets learn union find disjoint set!

**Sliding Windows**
Count Number of Nice Subarrays
Replace the Substring for Balanced String
Binary Subarrays With Sum
Subarrays with K Different Integers
Fruit Into Baskets
Shortest Subarray with Sum at Least K
Minimum Size Subarray Sum
Max Consecutive Ones III
Longest Substring with At Most K Distinct Characters


# Last Day Prep + Readings:
1. Multiply Strings...
Ok just do it slowly...
2. Pow(x, n)
Remember you can do log(n) runtime. Remember to do everything in the positive domain.
3. Generate Parentheses (READ!)
class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        if not n: return []
        left, right, res = n, n, []
        self.dfs(left, right, res, "")
        return res

    def dfs(self, left, right, res, path):
        if right < left: return ## ")" #-> right = 1, left = 2

        if not left and not right: # left = right = 0, means we exhausted all
            res.append(path)
            return

        if left: self.dfs(left - 1, right, res, path + "(")
        if right: self.dfs(left, right - 1, res, path + ")")
4. Subarray Sum Equals K
One pass. Prefix sum as the key of the hash table. Get current sum, "two sum" check. Add sum to hash table.
5. Lowest Common Ancestor of a Binary Tree
Pretty straight forward. You need both to be true.
6. Exclusive Time of Functions
Stack based, start and end is important. Becareful with boundaries.

Abandoned Questions:
1.Smallest Subtree With All the Deepest Nodes
This is tricky. It could be a huge tree. We need subtrees.
2. Palindromic Pairs
Make into trie.
3. Word Search II
Make into trie.
Kth Largest Element ( this is insertion sort )
4. Boundary of a Binary Tree
We need to break this down into multiple parts.
Left is top down, right is bottom up.
Left, bottom, right.
